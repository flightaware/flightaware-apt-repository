#!/bin/bash
# postinst script for flightaware-apt-repository
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

rm_conffile() {
    local PKGNAME="$1"
    local CONFFILE="$2"

    [ -e "$CONFFILE" ] || return 0

    local md5sum="$(md5sum $CONFFILE | sed -e 's/ .*//')"
    local old_md5sum="$(dpkg-query -W -f='${Conffiles}' $PKGNAME | \
            sed -n -e "\' $CONFFILE ' { s/ obsolete$//; s/.* //; p }")"
    if [ "$md5sum" != "$old_md5sum" ]; then
        echo "Obsolete conffile $CONFFILE has been modified by you."
        echo "Saving as $CONFFILE.dpkg-bak ..."
        mv -f "$CONFFILE" "$CONFFILE".dpkg-bak
    else
        echo "Removing obsolete conffile $CONFFILE ..."
        rm -f "$CONFFILE"
    fi
}

case "$1" in
    configure)

        # Check OS version
        if [ -x "$(command -v lsb_release)" ]; then
            VERSION_CODENAME="$(lsb_release -c -s)"
        fi

        if [ -z $VERSION_CODENAME ]; then
            # Check /etc/os-release
            . '/etc/os-release'

            case $VERSION_ID in
                "9")
                    VERSION_CODENAME="stretch"
                    ;;
                "10")
                    VERSION_CODENAME="buster"
                    ;;
                "11")
                    VERSION_CODENAME="bullseye"
                    ;;
                *)
                    echo "Unsupported OS version"
                    echo "FlightAware maintains APT repositories for Debian Bullseye, Buster, and Stretch"
                    exit 1
                    ;;
            esac
        fi

        # Get machine architecture and foreign architectures
        archs+=$( dpkg --print-architecture )
        for arch in $( dpkg --print-foreign-architectures )
        do
            archs+=( $arch )
        done

        # Ensure we have a apt repository for them
        arch_supported="false"
        for arch in "${archs[@]}"
        do
            if [[ $arch == "armhf" ]]; then
                arch_supported="true"
                break
            fi
        done

        # Bail if not
        [[ $arch_supported == "false" ]] && echo "No apt repository available for given architectures" && exit 1

        # Cleanup deprecated sources.list from piaware-repository if present
        listfile="/etc/apt/sources.list.d/piaware-$VERSION_CODENAME.list"
        rm_conffile piaware-repository $listfile

        # Generate flightaware-apt-repository.list if it doesn't already exist
        sources_file="/etc/apt/sources.list.d/flightaware-apt-repository.list"
        if [ ! -f $sources_file ]
        then
            sources_file_content="deb http://flightaware.com/adsb/piaware/files/packages $VERSION_CODENAME piaware"
            echo "Adding APT repo configuration for PiAware $VERSION_CODENAME packages"
            cat > $sources_file << EOF
# This file is automatically generated by the flightaware-apt-repository package
# to point to the correct FlightAware repository for the currently installed Debian OS.
$sources_file_content
EOF
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
